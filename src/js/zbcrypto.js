/**
 * Create the crypt config
 *
 * @param {string|WordArray} _pwd
 * @param {string|WordArray=} _salt
 * @return {CipherParams}
 */
function zbCreateCfg(_pwd, _salt){
	/** @type {string|WordArray|null} */
	var salt = null;
	if(_salt){
		salt = _salt;
	}else{
		salt = CryptoJS.MD5(_pwd);
	}
	/** @type {CipherParams} */
	var ret = CryptoJS.kdf.OpenSSL.execute(_pwd, 256/32, 128/32, salt);
	ret["iv"].clamp();
	ret["key"].clamp();
	return ret;
}
/**
 * Create the crypt config
 *
 * @param {boolean} _encFlg
 * @param {string|WordArray} _dat
 * @param {string|CipherParams} _cfg
 * @return {WordArray}
 *
 * _cfg can be: {
 *   (required)"iv": derivedParams.iv,
 *   (required)"key": derivedParams.key,
 *   (optional)"mode": CryptoJS.mode.CBC,
 *   (optional)"padding": CryptoJS.pad.Pkcs7,
 * };
 */
function zbDataCrypto(_encFlg, _dat, _cfg){
	/** @type {string|CipherParams} */
	var cfg = _cfg;
	if(typeof _cfg == "string"){
		cfg = zbCreateCfg(_cfg);
	}
	if(!(cfg && cfg["iv"] && cfg["key"])){
		throw new Error("Need iv and key. They can be generated by CryptoJS.kdf.OpenSSL.execute from password and salt.");
	}
	/** @type {!Object} */
	var cfg2 = {
		"mode": CryptoJS.mode.CBC,
		"padding": CryptoJS.pad.Pkcs7,
	};
	Object.assign(cfg2, /** @type {Object} */(cfg));

	/** @type {Cipher} */
	var cryptor = null;
	if(_encFlg){
		cryptor = CryptoJS.algo.AES.createEncryptor(cfg2.key, cfg2);
	}else{
		cryptor = CryptoJS.algo.AES.createDecryptor(cfg2.key, cfg2);
	}
	/** @type {WordArray} */
	var ret = cryptor.process(_dat);
	ret.concat(cryptor.finalize());
	ret.clamp();
	return ret;
}
/**
 * @param {string} _str
 * @param {string|CipherParams} _cfg
 * @return {string}
 */
function zbEncryptString(_str, _cfg){
	/** @type {WordArray} */
	var datIn = CryptoJS.enc.Utf8.parse(_str);
	/** @type {WordArray} */
	var datOut = zbDataCrypto(true, datIn, _cfg);
	return datOut.toString(CryptoJS.enc.Base64url);
}
/**
 * @param {string} _str
 * @param {string|CipherParams} _cfg
 * @return {string}
 */
function zbDecryptString(_str, _cfg){
	/** @type {WordArray} */
	var datIn = CryptoJS.enc.Base64url.parse(_str);
	/** @type {WordArray} */
	var datOut = zbDataCrypto(false, datIn, _cfg);
	return datOut.toString(CryptoJS.enc.Utf8);
}
/**
 * @param {WordArray} wdarr
 * @return {Array<number>}
 */
function wordArrayToBytes(wdarr){
	/** @type {Array<number>} */
	var bytes = new Array(wdarr.sigBytes);
	/** @type {Array<number>} */
	var words = wdarr.words;
	/** @type {number} */
	var idx = 0;
	for(var i=0; i<words.length; i++){
		/** @type {number} */
		var byt = words[i];
		for(var j=idx+wordArrayToBytes.WORD_SIZE-1; j>=idx; j--){
			if(j < bytes.length){
				bytes[j] = byt & 0xFF;
			}
			byt >>= 8;
		}
		idx += wordArrayToBytes.WORD_SIZE;
		if(idx >= bytes.length){
			break;
		}
	}
	return bytes;
}
/**
 * a word is 4 bytes
 *
 * @const {number}
 */
wordArrayToBytes.WORD_SIZE = 4;

// ------ Define Classes ------ //
/**
 * @constructor
 * @implements {ZBWriter}
 * @param {ZBWriterOption=} opt
 *
 * opt = {
 *   _downEle: HTMLLinkElement,   // optional
 * }
 */
function ZBlobWriter(opt){
	/** @private @type {number} */
	this.fsize = 0;
	/** @private @type {Array<ArrayBuffer|number>} */
	this.arrbuf = null;
	/** @private @type {HTMLLinkElement} */
	this.downEle = null;
	if(opt && opt._downEle){
		this.downEle = opt._downEle;
	}

	// --- Implement interface methods Start --- //
	/**
	 * @public
	 * @param {number} fsize
	 * @return {!Promise<void>}
	 */
	this.prepare = async function(fsize){
		this.fsize = fsize;
		if(this.downEle && this.downEle.href != "#"){
			window.URL.revokeObjectURL(this.downEle.href);
		}
	};
	/**
	 * @public
	 * @param {ArrayBuffer|Array<number>} buf
	 * @return {!Promise<void>}
	 */
	this.write = async function(buf){
		if(Array.isArray(buf)){
			if(this.arrbuf){
				this.arrbuf = this.arrbuf.concat(buf);
			}else{
				this.arrbuf = buf.concat();
			}
		}else{
			if(!this.arrbuf){
				this.arrbuf = new Array();
			}
			this.arrbuf.push(buf);
		}
		buf = null;
	};
	/**
	 * @public
	 * @return {!Promise<void>}
	 */
	this.cancel = async function(){};
	// --- Implement interface methods End --- //

	/**
	 * @public
	 * @return {Uint8Array|Array<number>}
	 */
	this.getBuffer = function(){
		if(this.arrbuf && this.arrbuf.length > 0){
			if(this.arrbuf[0] instanceof ArrayBuffer || this.arrbuf[0] instanceof Uint8Array){
				/** @type {number} */
				var sumLength = 0;
				for(var i = 0; i < this.arrbuf.length; i++){
					sumLength += this.arrbuf[i].byteLength;
				}
				/** @type {Uint8Array} */
				var whole = new Uint8Array(sumLength);
				/** @type {number} */
				var pos = 0;
				for(var i = 0; i < this.arrbuf.length; ++i){
					var dat = this.arrbuf[i];
					if(dat instanceof ArrayBuffer){
						dat = new Uint8Array(dat);
					}
					whole.set(/** @type {!ArrayBufferView} */(dat), pos);
					pos += dat.byteLength;
				}
				return whole;
			}
		}
		return this.arrbuf;
	};
	/**
	 * @public
	 * @return {!Blob}
	 */
	this.getBufferBlob = function(){
		/** @type {Uint8Array|Array<number>} */
		var buf = this.getBuffer();
		if(!(buf instanceof Uint8Array)){
			buf = new Uint8Array(buf);
		}
		return new Blob([buf], { "type" : "application/octet-binary" });
	};
	/**
	 * @public
	 * @param {string} fnm
	 */
	this.download = function(fnm){
		/** @type {!Blob} */
		var blob = this.getBufferBlob();
		downloadBlob(blob, fnm, this.downEle);
	};
	/**
	 * @public
	 * @return {number}
	 */
	this.getTotalSize = function(){
		return this.fsize;
	};
}

/**
 * @constructor
 * @implements {ZBReader}
 * @param {ZBReaderOption} _opt
 *
 * _opt = {
 *   _blob: Blob,    // required
 *   _bufSize: 999,  // optional
 * }
 */
function ZBlobReader(_opt){
	/** @private @type {Blob} */
	this.blob = null;
	if(_opt._blob){
		if(_opt._blob instanceof Blob){
			this.blob = _opt._blob;
		}else{
			throw new Error("blob is not a Blob.");
		}
	}else{
		throw new Error("blob must be specified.");
	}

	/**
	 * buffer size per read
	 *
	 * @private
	 * @type {number}
	 */
	this.bufSize = 1600;
	if(_opt._bufSize){
		this.bufSize = _opt._bufSize;
	}
	/** @private @type {number} */
	this.pos = 0;
	/** @private @type {FileReader} */
	this.reader = null;

	// --- Public methods Start --- //
	// --- Implement interface methods Start --- //
	/**
	 * @public
	 * @param {number=} offset
	 * @return {!Promise<void>}
	 */
	this.prepare = async function(offset){
		if(offset){
			if(offset >= this.getSize()){
				throw new Error("offset can not be bigger than input size.");
			}else{
				this.pos = offset;
			}
		}else{
			this.pos = 0;
		}

		this.reader = new FileReader();
	};
	/**
	 * @public
	 * @return {number}
	 */
	this.getBufSize = function(){
		return this.bufSize;
	};
	/**
	 * @public
	 * @return {number}
	 */
	this.getPos = function(){
		return this.pos;
	};
	/**
	 * @public
	 * @return {number}
	 */
	this.getSize = function(){
		return this.blob.size;
	};
	/**
	 * @public
	 * @return {boolean}
	 */
	this.isEnd = function(){
		return this.pos >= this.getSize();
	};
	/**
	 * @public
	 * @param {number=} size
	 * @return {!Promise<ArrayBuffer>}
	 */
	this.read = function(size){
		return new Promise(function(resolve, reject){
			if(this.reader.readyState == 1){
				return;
			}
			this.reader.onload = function(a_evt){
				/** @type {ArrayBuffer} */
				var a_dat = a_evt.target.result;
				resolve(a_dat);
			}.bind(this);
			/** @type {number} */
			var pos1 = this.pos;
			if(size){
				this.pos += size;
			}else{
				this.pos += this.bufSize;
			}
			this.reader.readAsArrayBuffer(this.blob.slice(pos1, this.pos));
		}.bind(this));
	};
	/**
	 * @public
	 */
	this.dispose = function(){
		this.reader = null;
		this.blob = null;
	};
	// --- Implement interface methods End --- //
}

/**
 * @constructor
 * @param {ZbCryptoReaderOption} _info
 *
 * (required)_info = {
 *   (optional)_decrypt: true,
 *   (required)_keycfg: "aaabbb", // keycfg may be an object as the config of crypto or a string as the password.
 *   (required)_reader: Reader,
 * };
 */
function ZbCryptoReader(_info){
	/**
	 * block size of aes is 128 bits = 16 bytes
	 *
	 * @private @const @type {number}
	 */
	this.BLOCK_SIZE = 16;

	/** @private @type {boolean} */
	this.encrypt = true;
	/** @private @type {ZBReader} */
	this.reader = _info._reader;
	/** @private @type {WordArray} */
	this.key = null;
	/** @private @type {WordArray} */
	this.iv = null;
	/** @private @type {Cipher} */
	this.cryptor = null;
	/** @private @type {Array<number>} */
	this.remain = null;
	/** @private @type {number} */
	this.nextPos = 0;
	/** @private @type {number} */
	this.wholeSize = 0;
	/** @private @type {number} */
	this.locked = 0; //0 not locked, 1 locked, 2 will dispose
	/** @private @type {Array<function(boolean):void>} */
	this.waiters = [];

	if(_info._decrypt){
		this.encrypt = false;
	}
	if(!this.reader){
		throw new Error("reader must be specified.");
	}

	if(_info._keycfg){
		/** @type {CipherParams} */
		var derivedParams = null;
		if(typeof _info._keycfg == "string"){
			derivedParams = zbCreateCfg(_info._keycfg);
		}else{
			derivedParams = /** @type {CipherParams} */(_info._keycfg);
		}
		this.key = derivedParams.key;
		this.iv = derivedParams.iv;
	}else{
		throw new Error("keycfg must be specified.");
	}

	/**
	 * @public
	 * @param {boolean=} dispose
	 * @return {!Promise<boolean>}
	 */
	this.lock = function(dispose){
		return new Promise(function(resolve, reject){
			switch(this.locked){
			case 1:
				if(dispose){
					this.locked = 2;
				}
				this.waiters.push(resolve);
				break;
			case 2:
				resolve(false);
				break;
			default:
				this.locked = dispose ? 2 : 1;
				resolve(true);
				break;
			}
		}.bind(this));
	};

	/**
	 * @public
	 */
	this.unlock = function(){
		if(this.locked > 0){
			if(this.waiters.length){
				/** @type {function(boolean):void} */
				var func = this.waiters.shift();
				func(true);
			}else if(this.locked == 1){
				this.locked = 0;
			}
		}
	};

	/**
	 * @public
	 * @return {!Promise<number>}
	 *
	 * In encrypt mode, return assumed data size after encryption.
	 * In decrypt mode, return real data size after decryption.
	 */
	this.calcWholeSize = async function(){
		if(this.wholeSize){
			return this.wholeSize;
		}
		if(this.encrypt){
			this.wholeSize = Math.ceil((this.reader.getSize()+1)/this.BLOCK_SIZE)*this.BLOCK_SIZE;
			return this.wholeSize;
		}

		if(this.reader.getSize() == 0){
			await this.prepare();
		}
		/** @type {number} */
		var offset = this.reader.getSize() - this.BLOCK_SIZE;
		/** @type {Array<number>} */
		var buf = await this.read(offset);
		this.wholeSize = offset + buf.length;
		return this.wholeSize;
	};

	/**
	 * @public
	 * @param {number=} offset
	 * @return {!Promise<void>}
	 */
	this.prepare = async function(offset){
		// console.debug("do prepare");
		/** @type {number} */
		var startPos = offset || 0;
		if(offset){
			if(this.encrypt){
				throw new Error("Can NOT set offset for encryption.");
			}
			offset -= (offset % this.BLOCK_SIZE) + this.BLOCK_SIZE;
			if(offset < 0){
				offset = 0;
			}
		}
		await this.reader.prepare(offset);

		/** @type {Object<string, *>} */
		var cfg = {
			iv: this.iv,
			mode: CryptoJS.mode.CBC,
			padding: CryptoJS.pad.Pkcs7
		};
		if(startPos){
			// read for decrypt
			cfg.iv = await this._read(this.BLOCK_SIZE);
		}
		if(this.encrypt){
			this.cryptor = CryptoJS.algo.AES.createEncryptor(this.key, cfg);
		}else{
			this.cryptor = CryptoJS.algo.AES.createDecryptor(this.key, cfg);
		}
		this.nextPos = startPos;
		this.remain = null;
	};

	/**
	 * @public
	 * @param {number=} offset
	 * @param {number=} size
	 * @return {!Promise<Array<number>>}
	 */
	this.read = async function(offset, size){
		/** @type {number} */
		var size2 = size || this.reader.getBufSize();
		/** @type {Array<number>} */
		var ret = null;
		/** @type {number} */
		var startPos = offset >= 0 ? offset : this.reader.getPos();
		if(this.nextPos == startPos && this.remain){
			if(size2 <= this.remain.length){
				this.nextPos += size2;
				ret = this.remain.slice(0, size2);
				this.remain = this.remain.slice(size2);
				if(this.remain.length == 0){
					this.remain = null;
				}
				return ret;
			}else{
				ret = this.remain;
				startPos += this.remain.length;
				this.nextPos += this.remain.length;
				size2 -= this.remain.length;
			}
		}

		/** @type {number} */
		var size3 = Math.ceil(((startPos % this.BLOCK_SIZE) + size2) / this.BLOCK_SIZE) * this.BLOCK_SIZE;
		if(!this.cryptor || this.nextPos != startPos){
			await this.prepare(startPos);
			size3 += this.BLOCK_SIZE;
		}

		/** @type {WordArray} */
		var wdat = await this._read(size3);
		/** @type {Array<number>} */
		var ret2 = wordArrayToBytes(this.cryptor.process(wdat));
		if(this.reader.isEnd()){
			ret2 = ret2.concat(wordArrayToBytes(this.cryptor.finalize()));
		}

		if(startPos < this.reader.getPos()){
			/** @type {number} */
			var st = startPos - (this.reader.getPos() - wdat.sigBytes);
			if(st > 0){
				ret2 = ret2.slice(st);
			}
			if(ret2.length > size2){
				this.remain = ret2.slice(size2);
				ret2 = ret2.slice(0, size2);
			}
			this.nextPos += size2;
		}else{
			ret2 = null;
		}
		if(ret){
			if(ret2){
				ret = ret.concat(ret2);
			}
		}else if(ret2){
			ret = ret2;
		}
		return ret;
	};

	/**
	 * @public
	 * @return {number}
	 */
	this.getPos = function(){
		return this.reader.getPos();
	};
	/**
	 * @public
	 * @return {number}
	 */
	this.getSize = function(){
		return this.reader.getSize();
	};
	/**
	 * @public
	 * @return {boolean}
	 */
	this.isEnd = function(){
		return this.reader.isEnd();
	};
	/**
	 * @public
	 */
	this.dispose = function(){
		this.reader.dispose();
		this.reader = null;
		this.cryptor = null;
	};
	/**
	 * @public
	 * @return {?string}
	 */
	this.getName = function(){
		return this.reader.getName();
	};

	/**
	 * @private
	 * @param {number=} size
	 * @return {!Promise<WordArray>}
	 */
	this._read = async function(size){
		/** @type {ArrayBuffer} */
		var buf = await this.reader.read(size);
		/** @type {WordArray} */
		var wdat = new CryptoJS.lib.WordArray.init(buf);
		return wdat;
	};
}

/**
 * @constructor
 * @param {ZbCryptoOption} _info
 *
 * (required)_info = {
 *   (optional)_decrypt: true,
 *   (required)_keycfg: "aaabbb", // keycfg may be an object as the config of crypto or a string as the password.
 *   (required)_reader: Reader,
 *   (required)_writer: Writer,
 * };
 */
function ZbCrypto(_info){
	/** @private @type {ZbCryptoReader} */
	this.reader = new ZbCryptoReader(_info);
	/** @private @type {ZBWriter} */
	this.writer = _info._writer;
	/** @private @type {number} */
	this.basetime = 0;
	/** @private @type {number} */
	this.basepos = 0;
	/**
	 * Size per second.
	 *
	 * @private @type {number}
	 */
	this.speed = 0;

	if(!this.writer){
		throw new Error("writer must be specified.");
	}

	/**
	 * @public
	 * @param {number=} offset
	 * @param {(function():boolean)=} stepFunc
	 * @return {!Promise<boolean>} return true if done, else return false.
	 *
	 * stepFunc: If need next step return true, else return false.
	 */
	this.start = async function(offset, stepFunc){
		/** @type {number} */
		var startPos = offset || 0;
		/** @type {number} */
		var wsize = await this.reader.calcWholeSize();
		await this.writer.prepare(wsize);
		await this.reader.prepare(offset);

		this.basetime = Date.now() + 1000; // 1 second later
		this.basepos = startPos;

		/** @type {number} */
		var sts = this.reader.isEnd() ? 2 : 0; // 0 go on, 1 cancel, 2 done
		while(sts == 0){
			/** @type {Array<number>} */
			var ret = await this.reader.read();
			if(ret){
				await this.writer.write(ret);
			}
			if(this.reader.isEnd()){
				sts = 2;
			}else if(stepFunc && !stepFunc()){
				sts = 1;
			}
			ret = null;
		}
		if(sts == 1){
			await this.writer.cancel();
		}
		this.writer = null;
		this.reader.dispose();
		this.reader = null;
		return (sts == 2);
	};
	/**
	 * @public
	 * @return {number}
	 */
	this.calSpeed = function(){
		if(Date.now() > this.basetime){
			this.speed = (this.reader.getPos() - this.basepos) * 1000 / (Date.now() - this.basetime + 1000);
			this.basetime = Date.now() + 1000;
			this.basepos = this.reader.getPos();
		}
		return this.speed;
	}
}

/**
 * @param {ZBReader} _reader
 * @param {ZBWriter} _writer
 * @param {(function():boolean)=} _stepFunc
 * @return {!Promise<boolean>}
 */
async function zbPipe(_reader, _writer, _stepFunc){
	await _reader.prepare(0);
	await _writer.prepare(_reader.getSize());
	/** @type {number} */
	var sts = 0; // 0 go on, 1 cancel, 2 done
	while(sts == 0){
		/** @type {ArrayBuffer} */
		var buf = await _reader.read();
		await _writer.write(buf);
		if(_reader.isEnd()){
			sts = 2;
		}else if(_stepFunc && !_stepFunc()){
			sts = 1;
		}
	}
	if(sts == 1){
		await _writer.cancel();
		return false;
	}else{
		return true;
	}
}
